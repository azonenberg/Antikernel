/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2017 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief Implementation of JTAGNOCBridgeInterface
 */
#include "nocbridge.h"
#include "JtagDebugBridge_addresses_enum.h"

using namespace std;

/*
	Generated by the following code snippet (for the ATM HEC polynomial, x^8 + x^2 + x + 1)

	const int poly = 0x107;
	for(int i=0; i<256; i++)
	{
		unsigned int temp = i;
		for(int j=0; j<8; j++)
			temp = (temp << 1) ^ ( (temp & 0x80) ? poly : 0 );
		printf("0x%02x, ", temp & 0xff);
		if( (i & 15) == 15)
			printf("\n");
	}
*/
static const uint8_t g_crc8Table[256] =
{
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
	0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
	0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
	0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
	0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
	0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
	0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
	0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
	0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
	0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
	0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
	0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
	0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
	0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
	0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
	0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Construction / destruction

JTAGNOCBridgeInterface::JTAGNOCBridgeInterface(JtagFPGA* pfpga)
	: m_fpga(pfpga)
{
	//Populate free list
	for(unsigned int i = DEBUG_LOW_ADDR; i <= DEBUG_HIGH_ADDR; i++)
		m_freeAddresses.emplace(i);

	//Reset the TAP of our DUT and select USER2 (the actual transfer instruction)
	LogTrace("Initializing JTAG port\n");
	pfpga->ResetToIdle();
	pfpga->SelectUserInstruction(1);
}

JTAGNOCBridgeInterface::~JTAGNOCBridgeInterface()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Address allocation

bool JTAGNOCBridgeInterface::AllocateClientAddress(uint16_t& addr)
{
	//Pop free list, if we have anything there
	if(m_freeAddresses.empty())
		return false;

	addr = *m_freeAddresses.begin();
	m_freeAddresses.erase(addr);

	return true;
}

void JTAGNOCBridgeInterface::FreeClientAddress(uint16_t addr)
{
	//Disable "comparison is always false due to limited range of data type" warnings for here
	//If DEBUG_*_ADDR are at the low/high ends of the address range some comparisons are pointless
	//but we need them there to keep the code generic.
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wtype-limits"

	//Warn if we try to do something stupid
	if( (addr < DEBUG_LOW_ADDR) || (addr > DEBUG_HIGH_ADDR) )
	{
		LogWarning("JTAGNOCBridgeInterface: Attempted to free client address %04x, which isn't in the debug subnet\n",
			addr);
		return;
	}

	#pragma GCC diagnostic pop

	//If it's already free, something is funky
	if(m_freeAddresses.find(addr) != m_freeAddresses.end())
	{
		LogWarning("JTAGNOCBridgeInterface: Attempted to free client address %04x, which was already free\n",
			addr);
		return;
	}

	//Nope, we're good
	m_freeAddresses.emplace(addr);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The actual JTAG bridge stuff

/**
	@brief Cycle the JTAG interface with more data

	Push any pending messages to the DUT; send idles if we have nothing to send.
	Take any returned data and put it in our queue.
 */
void JTAGNOCBridgeInterface::Cycle()
{
	//Send up to 4KB (1K words) of data.
	//Note that some of this may be idle frames rather than actual data if there's nothing to send
	const int tx_buf_len = 1024;

	//Input/output data buffers
	static vector<uint32_t> tx_buf;
	static vector<uint32_t> rx_buf;
	tx_buf.clear();
	tx_buf.reserve(1024);
	rx_buf.clear();
	rx_buf.reserve(1024);

	//Generate an idle frame we can fill empty space in the TX buffer with
	//TODO: Send different data once link is up!
	AntikernelJTAGFrameHeader idle_frame;
	idle_frame.bits.ack = 0;					//not acking anything
	idle_frame.bits.nak = 0;					//not nacking anything
	idle_frame.bits.sequence = 0;				//no sequence number
	idle_frame.bits.credits = /*0x3FF*/0;		//we have no limit on buffer space, always report "max"
	idle_frame.bits.ack_seq = 0xcf;				//not acking anything
	idle_frame.bits.payload_present = 1;		//no payload
	idle_frame.bits.rpc = 0;					//no RPC payload
	idle_frame.bits.dma = 0;					//no DMA payload
	idle_frame.bits.length = 0;					//empty payload
	idle_frame.bits.reserved_zero = 0;			//nothing here

	FlipEndian32Array(idle_frame.bytes, 8);		//Convert to network byte order
												//before computing checksum
	//Calculate checksum for idle frame.
	//Note that we can't poke the checksum struct field b/c we did an endian shift!
	//TODO: figure out how to do checksum in host byte order and then endian swap after we compute it?
	idle_frame.bytes[7] = CRC8(idle_frame.bytes, 7);

	//TODO: Send actual messages here

	//Pad the buffer out to size with idle frames
	while(tx_buf.size() <= (tx_buf_len - 2) )
	{
		tx_buf.push_back(idle_frame.words[0]);
		tx_buf.push_back(idle_frame.words[1]);
	}

	//Sanity check
	LogTrace("About to send %d words\n", (int)tx_buf.size());

	//Send the actual data
	//TODO: do split transactions
	m_fpga->ScanDR((unsigned char*)&tx_buf[0], (unsigned char*)&rx_buf[0], tx_buf.size() * 32);

	//Print out the first few inbound words
	LogTrace("Got stuff\n");
	for(int i=0; i<4; i++)
		LogTrace("%08x\n", rx_buf[i]);
}

uint8_t JTAGNOCBridgeInterface::CRC8(uint8_t* data, unsigned int len)
{
	uint8_t crc = 0;
	for(unsigned int i=0; i<len; i++)
		crc = g_crc8Table[crc ^ data[i]];
	return crc;
}
