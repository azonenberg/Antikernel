/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief SPLASH build script for nocswitch
 */

#include <splashcore/splashcore.h>

using namespace std;

SPLASHFILE_EXPORT void CreateNodes(BuildGraph* graph)
{
	//Save some useful variables
	string srcdir = GetDirOfFile(CanonicalizePath(__FILE__));
	
	//Find all of the libjtaghal source files
	vector<string> source_files;
	FindFilesByExtension(srcdir, ".cpp", source_files);
	
	//Generic compiler settings
	CppCompileFlagList cflags;
	cflags.push_back(new CppStandardFlag(CppStandardFlag::CPP_STANDARD_11));
	cflags.push_back(new CppOptimizationLevelFlag(CppOptimizationLevelFlag::OPT_LEVEL_NONE));
	cflags.push_back(new CppDebugInfoFlag);
	cflags.push_back(new CppProfilingFlag);
	
	//Multiarch build
	string arches[]=
	{
		"x86_64-linux-gnu",
		//"x86_64-w64-mingw32",
		"arm-linux-gnueabihf"
	};
	for(size_t i=0; i<sizeof(arches)/sizeof(arches[0]); i++)
	{
		string arch = arches[i];
	
		CppToolchain* toolchain = CppToolchain::CreateDefaultToolchainForArchitectureCached(arch);
		
		//Linker settings vary slightly by platform
		CppLinkFlagList lflags;
		lflags.push_back(new CppLinkProfilingFlag);
		lflags.push_back(new CppLinkLibraryByTargetNameFlag("jtaghal", graph));
		
		//for some reason the ARM cross compiler can't recognize that jtaghal pulls in ftd2xx already
		string ftd2xx_path = FindSharedLibrary("ftd2xx", arch);
		if(!ftd2xx_path.empty())
			lflags.push_back(new CppLinkLibraryByPathFlag(ftd2xx_path));
		
		//On Windows platforms, socket library is non-default
		if(arch.find("mingw") != string::npos)
			lflags.push_back(new CppLinkLibraryByNameFlag("ws2_32"));
		
		//Define the actual library
		CppExecutableNode::CreateCppExecutableNode(
			graph,
			source_files,
			toolchain,
			cflags,
			lflags,
			"nocswitch",
			true);
	}
}

SPLASHFILE_EXPORT void CreateEdges(BuildGraph* /*graph*/)
{
}
