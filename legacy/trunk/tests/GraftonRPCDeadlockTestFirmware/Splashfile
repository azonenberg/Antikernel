/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief SPLASH build script for GraftonRPCDeadlockTestFirmware
 */

#include <splashcore/splashcore.h>

using namespace std;

SPLASHFILE_EXPORT void CreateNodes(BuildGraph* graph)
{
	//Find source files
	string srcdir = GetDirOfFile(CanonicalizePath(__FILE__));
	vector<string> source_files;
	FindFilesByExtension(srcdir, ".c", source_files);
	FindFilesByExtension(srcdir, ".S", source_files);
	
	//Compiler settings
	CppCompileFlagList cflags;
	cflags.push_back(new CppStandardFlag(CppStandardFlag::CPP_STANDARD_C99));
	cflags.push_back(new CppMachineFlag("mips1"));
	cflags.push_back(new CppIncludeDirectoryFlag(CanonicalizePath(graph->GetSourceDir() + "/include/")));
	cflags.push_back(new CppDebugInfoFlag);
	
	//Some stuff might break at -Os so test it!
	cflags.push_back(new CppOptimizationLevelFlag(CppOptimizationLevelFlag::OPT_LEVEL_SIZE));

	//Linker settings
	CppLinkFlagList lflags;
	lflags.push_back(new CppBareMetalFlag);
	lflags.push_back(new CppLinkLibraryByTargetNameFlag("c-antikernel", graph));
	lflags.push_back(new CppLinkLibraryByTargetNameFlag("graftonstartup", graph));
	lflags.push_back(new CppLinkerScriptFlag(graph->GetSourceDir() + "/lib/grafton-bram.ld"));
	lflags.push_back(new CppLinkDebugInfoFlag);
		
	CppToolchain* toolchain = CppToolchain::CreateDefaultToolchainForArchitectureCached("mips-elf");
		
	//Build the binaries
	string name = "GraftonRPCDeadlockTestFirmware";
	CppExecutableNode* exe = CppExecutableNode::CreateCppExecutableNode(
		graph,
		source_files,
		toolchain,
		cflags,
		lflags,
		name,
		false);
		
	//Then hex-ify it
	size_t romsize = 4096;	//size of the ROM in words
	HexFirmwareNode::CreateHexFirmwareNode(
		graph,
		exe,
		romsize,
		name,
		true);
}

SPLASHFILE_EXPORT void CreateEdges(BuildGraph* /*graph*/)
{
}
