/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief SPLASH build script for JtagPingTestBitstream
 */

#include <splashcore/splashcore.h>

using namespace std;

SPLASHFILE_EXPORT void CreateNodes(BuildGraph* graph )
{
	//Setup
	string srcdir = GetDirOfFile(CanonicalizePath(__FILE__));
	string prjroot = graph->GetSourceDir();
	XilinxFPGAToolchain* toolchain = XilinxFPGAToolchain::CreateDefaultToolchainCached();
	
	//Find source files
	vector<string> source_files;
	source_files.push_back(prjroot + "/rtl/achd-soc/debug/JtagDebugController.v");
	FindFilesByExtension(prjroot + "/rtl/achd-soc/crypt/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/math/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/noc/common/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/noc/dma/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/noc/rpcv2/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/util/", ".v", source_files);
	
	//Create the nocgen nodes (TODO: port the other one)
	Nocgenv2GeneratedSourceNode* top = Nocgenv2GeneratedSourceNode::CreateNocgenNode(
		graph,
		srcdir + "/JtagPingTestBitstream.nocgen",
		prjroot + "/bsp/lx9mini.bsp");
		
	Nocgenv2GeneratedSourceNode* top_delay = Nocgenv2GeneratedSourceNode::CreateNocgenNode(
		graph,
		srcdir + "/JtagPingTestBitstreamWithDelay.nocgen",
		prjroot + "/bsp/lx9mini.bsp"); 
		
	//Make forked source file lists
	vector<string> source_files_normal;
	vector<string> source_files_delay;
	source_files_normal.insert(source_files_normal.end(), source_files.begin(), source_files.end());
	source_files_delay.insert(source_files_delay.end(), source_files.begin(), source_files.end());
	source_files_normal.push_back(top->GetOutputPath());
	source_files_delay.push_back(top_delay->GetOutputPath());
	
	//Generic bitstream setup
	FPGASynthesisFlagList xstflags;
	xstflags.push_back(new FPGASynthesisHierarchyFlag(FPGASynthesisHierarchyFlag::HIERARCHY_SOFT));
	xstflags.push_back(new FPGASynthesisOptimizationFlag(
		FPGASynthesisOptimizationFlag::OPT_NORMAL,
		FPGASynthesisOptimizationFlag::OPT_SPEED));
	XilinxFPGAMapFlagList mapflags;
	FPGAPlaceAndRouteFlagList parflags;
	FPGATimingAnalysisFlagList timeflags;
	FPGABitstreamGenerationFlagList bitgenflags;
	bitgenflags.push_back(new XilinxSPIBusWidthFlag(4));
	string top_level = "JtagPingTestBitstream";
	
	//Create the bitstreams
	FPGABitstreamNode::CreateFPGABitstreamNode(
		graph,
		source_files_normal,
		"JtagPingTestBitstream",
		top->GetTopLevel(),
		top->GetDevice(),
		top->GetConstraintsPath(),
		xstflags,
		mapflags,
		parflags,
		timeflags,
		bitgenflags,
		toolchain,
		true);
		
	FPGABitstreamNode::CreateFPGABitstreamNode(
		graph,
		source_files_delay,
		"JtagPingTestBitstreamWithDelay",
		top_delay->GetTopLevel(),
		top_delay->GetDevice(),
		top_delay->GetConstraintsPath(),
		xstflags,
		mapflags,
		parflags,
		timeflags,
		bitgenflags,
		toolchain,
		true);
}

SPLASHFILE_EXPORT void CreateEdges(BuildGraph* /* graph */)
{
}
