////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//ANTIKERNEL v0.1                                                                                                     //
//                                                                                                                    //
//Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                         //
//All rights reserved.                                                                                                //
//                                                                                                                    //
//Redistribution and use in source and binary forms, with or without modification, are permitted provided that the    //
//following conditions are met:                                                                                       //
//                                                                                                                    //
//   * Redistributions of source code must retain the above copyright notice, this list of conditions, and the        //
//     following disclaimer.                                                                                          //
//                                                                                                                    //
//   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the      //
//     following disclaimer in the documentation and/or other materials provided with the distribution.               //
//                                                                                                                    //
//   * Neither the name of the author nor the names of any contributors may be used to endorse or promote products    //
//     derived from this software without specific prior written permission.                                          //
//                                                                                                                    //
//THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  //
//TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL//
//THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES       //
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR      //
//BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT//
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE      //
//POSSIBILITY OF SUCH DAMAGE.                                                                                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// @file
// @author Andrew D. Zonenberg
// @brief NocGen script for generating MWJtagTop

//Early pre-PCB test for area estimates

// Top-level module name
top MWJtagTop

//Pre-shared HMAC key for the name server to allow writing
namesrvr_key "ThisIsALongAndComplicatedPassword"

//Move Antikernel infrastructure out of the way
floorplan	namesrvr	CLOCKREGION_X0Y4:CLOCKREGION_X0Y4
floorplan	sysinfo		CLOCKREGION_X0Y4:CLOCKREGION_X0Y4

// Clock generation
pll MainClockPLL
	inclk clkin
	outclk clk_noc		freq 100M duty 0.5 phase 0.0
	outclk clk_25mhz	freq  25M duty 0.5 phase 0.0
	outclk clk_125mhz	freq 125M duty 0.5 phase 0.0
	outclk clk_200mhz	freq 200M duty 0.5 phase 0.0
endpll

iodelay_refclk clk_200mhz

//MAC address generator
node macgen DieSerialMacGenerator

	floorplan	CLOCKREGION_X0Y4:CLOCKREGION_X0Y4

	rpc
endnode

//ICMP
node icmp ICMPv6OffloadEngine

	floorplan	CLOCKREGION_X0Y2:CLOCKREGION_X0Y2

	parameter IPV6_HOST				[[node_ipv6_addr]]

	rpc
	dma	
endnode

// The IP offload core
//Set this up as baseT for initial testing (will be baseX in the real design)
node ipv6 IPv6OffloadEngine

	floorplan	CLOCKREGION_X0Y3:CLOCKREGION_X0Y3

	parameter PHY_CHIPSET			"KSZ9031"
	parameter PHY_INTERFACE			"RGMII"
	parameter PHY_MD_ADDR			7
	
	parameter OUTPUT_PHASE_SHIFT	"PLL"
	parameter CLOCK_BUF_TYPE		"LOCAL"
	
	//Forward packets to the appropriate handler
	parameter ICMP_HOST			[[node_icmp_addr]]
	parameter TCP_HOST			[[node_tcp_addr]]
	
	clock   	clk_25mhz		port clk_25mhz
	clock   	clk_125mhz		port clk_125mhz
	clock		eth0_rxc		port xmii_rxc
	
	input	1 	eth0_rx_ctl		port xmii_rx_ctl
	input	4 	eth0_rxd		port xmii_rxd
	
	output	1 	eth0_tx_ctl		port xmii_tx_ctl
	output	1 	eth0_txc		port xmii_txc
	output	4 	eth0_txd		port xmii_txd
	
	inout	1	eth0_mdio		port mgmt_mdio
	output	1	eth0_mdc		port mgmt_mdc
	
	output	1	eth0_reset_n	port reset_n
	
	//Don't need output clock
	nc							port clkout
	
	//Tie off unused baseX ports
	constant	1'b0				port sfp_refclk
	constant	1'b0				port sfp_rx_p
	constant	1'b0				port sfp_rx_n
	nc								port sfp_tx_p
	nc								port sfp_tx_n
	nc								port gmii_rxc

	rpc
	dma
endnode

//The actual TCP offload engine
node tcp TCPOffloadEngine

	floorplan	CLOCKREGION_X0Y0:CLOCKREGION_X0Y1

	parameter IPV6_HOST				[[node_ipv6_addr]]
	parameter BASE_PORT				16'd50100
	
	parameter SOCKET_COUNT			32
	parameter SOCKET_TIMEOUT_MS		15000
	parameter RETRANSMIT_TIMEOUT_MS	25

	rpc
	dma
	
endnode

//The JTAG controller
node jtag0 JtagSocketServer
	rpc
	dma
	
	floorplan	CLOCKREGION_X1Y1:CLOCKREGION_X1Y2
	
	parameter BASE_PORT				16'd50100
	parameter CHANNEL_COUNT			8
	
	parameter TX_FLUSH_TIME			500	//time, in us, to wait before flushing tx fifo, even if not empty
	
	output	8	target0_tck			port jtag_tck
	output	8	target0_tms			port jtag_tms
	output	8	target0_tdi			port jtag_tdi
	input	8	target0_tdo			port jtag_tdo

endnode

node jtag1 JtagSocketServer
	rpc
	dma
	
	floorplan	CLOCKREGION_X1Y2:CLOCKREGION_X1Y3
	
	parameter BASE_PORT				16'd50108
	parameter CHANNEL_COUNT			8
	
	parameter TX_FLUSH_TIME			500	//time, in us, to wait before flushing tx fifo, even if not empty
	
	output	8	target1_tck			port jtag_tck
	output	8	target1_tms			port jtag_tms
	output	8	target1_tdi			port jtag_tdi
	input	8	target1_tdo			port jtag_tdo

endnode

node jtag2 JtagSocketServer
	rpc
	dma
	
	floorplan	CLOCKREGION_X1Y0:CLOCKREGION_X1Y1
	
	parameter BASE_PORT				16'd50116
	parameter CHANNEL_COUNT			8
	
	parameter TX_FLUSH_TIME			500	//time, in us, to wait before flushing tx fifo, even if not empty
	
	output	8	target2_tck			port jtag_tck
	output	8	target2_tms			port jtag_tms
	output	8	target2_tdi			port jtag_tdi
	input	8	target2_tdo			port jtag_tdo

endnode
