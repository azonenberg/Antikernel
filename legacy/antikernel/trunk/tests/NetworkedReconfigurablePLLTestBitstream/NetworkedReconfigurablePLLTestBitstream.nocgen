////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//ANTIKERNEL v0.1                                                                                                     //
//                                                                                                                    //
//Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                         //
//All rights reserved.                                                                                                //
//                                                                                                                    //
//Redistribution and use in source and binary forms, with or without modification, are permitted provided that the    //
//following conditions are met:                                                                                       //
//                                                                                                                    //
//   * Redistributions of source code must retain the above copyright notice, this list of conditions, and the        //
//     following disclaimer.                                                                                          //
//                                                                                                                    //
//   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the      //
//     following disclaimer in the documentation and/or other materials provided with the distribution.               //
//                                                                                                                    //
//   * Neither the name of the author nor the names of any contributors may be used to endorse or promote products    //
//     derived from this software without specific prior written permission.                                          //
//                                                                                                                    //
//THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  //
//TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL//
//THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES       //
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR      //
//BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT//
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE      //
//POSSIBILITY OF SUCH DAMAGE.                                                                                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// @file
// @author Andrew D. Zonenberg
// @brief NocGen script for generating NetworkedReconfigurablePLLTestBitstream

// Top-level module name
top NetworkedReconfigurablePLLTestBitstream

//Pre-shared HMAC key for the name server to allow writing
namesrvr_key "ThisIsALongAndComplicatedPassword"

// Clock generation
pll MainClockPLL
	diffclk clkin
	
	//Main clock for the NoC stuff
	outclk clk_noc		freq 200M duty 0.5 phase 0.0
	
	//And another clock for the reconfiguration domain
	//This clock's name must end in "_reconfig" so that Splash's
	//warning filters will correctly eliminate false positives
	outclk clk_reconfig freq 100M duty 0.5 phase 0.0
	
endpll

// The DUT
node pll NetworkedReconfigurablePLL
	rpc
	
	//Input clocks
	//Cannot be generated by this PLL (although it's OK if they come from another fixed-frequency PLL)
	clock		clkin			port clk_in
	clock		clk_reconfig	port clk_reconfig
	
	//This frequency MUST be known statically at synthesis time for reflection purposes
	parameter	IN_PERIOD	period(clkin)
	
	//Leave clock buffer options at default (gate everything, use global buffers)
	
	//Set output clock periods
	parameter	OUT0_MIN_PERIOD		5.000
	parameter	OUT1_MIN_PERIOD		5.000
	parameter	OUT2_MIN_PERIOD		5.000
	parameter	OUT3_MIN_PERIOD		5.000
	parameter	OUT4_MIN_PERIOD		5.000
	parameter	OUT5_MIN_PERIOD		5.000

	//Hook up output clocks
	clockout	clk_out0		port clk_out0	
	clockout	clk_out1		port clk_out1
	clockout	clk_out2		port clk_out2
	clockout	clk_out3		port clk_out3
	clockout	clk_out4		port clk_out4
	clockout	clk_out5		port clk_out5

endnode

// Frequency counters
node freqcnt0	FrequencyCounter
	rpc
	clock		clk_out0				port clk_measure
endnode

node freqcnt1	FrequencyCounter
	rpc
	clock		clk_out1		port clk_measure
	
	//wow, ISE P&R sucks! We shouldn't need to floorplan this.
	floorplan CLOCKREGION_X0Y0:CLOCKREGION_X0Y0
	
endnode

node freqcnt2	FrequencyCounter
	rpc
	clock		clk_out2		port clk_measure
	
	floorplan CLOCKREGION_X0Y0:CLOCKREGION_X0Y0
	
endnode

node freqcnt3	FrequencyCounter
	rpc
	clock		clk_out3		port clk_measure
	
	floorplan CLOCKREGION_X0Y0:CLOCKREGION_X0Y0
	
endnode

node freqcnt4	FrequencyCounter
	rpc
	clock		clk_out4		port clk_measure
	
	floorplan CLOCKREGION_X0Y0:CLOCKREGION_X0Y0
	
endnode

node freqcnt5	FrequencyCounter
	rpc
	clock		clk_out5		port clk_measure
endnode

crossclock clk_out0 clk_noc
crossclock clk_out1 clk_noc
crossclock clk_out2 clk_noc
crossclock clk_out3 clk_noc
crossclock clk_out4 clk_noc
crossclock clk_out5 clk_noc
crossclock clk_noc clk_reconfig
