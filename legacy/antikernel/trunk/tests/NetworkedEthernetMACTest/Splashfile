/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief SPLASH build script for NetworkedEthernetMACTest
 */

#include <splashcore/splashcore.h>

using namespace std;

string g_testname = "NetworkedEthernetMACTest";

struct
{
	string name;
	string partition;
} g_partlist[] = 
{
	{"-ksz9021r-port0", "switch" },
	{"-ksz9021r-port1", "switch" },
	{"-ksz9021r-port2", "switch" },
	{"-ksz9021r-port3", "switch" },
	{"-ksz9031r",       "tdr" },
	{"-88e1111",		"atlys" },
};

SPLASHFILE_EXPORT void CreateNodes(BuildGraph* graph)
{
	string srcdir = GetDirOfFile(CanonicalizePath(__FILE__));
	
	//Build the test case
	vector<string> source_files;
	FindFilesByExtension(srcdir, ".cpp", source_files);
	
	CppCompileFlagList cflags;
	cflags.push_back(new CppStandardFlag(CppStandardFlag::CPP_STANDARD_11));
	cflags.push_back(new CppOptimizationLevelFlag(CppOptimizationLevelFlag::OPT_LEVEL_NONE));
	cflags.push_back(new CppDebugInfoFlag);
	cflags.push_back(new CppProfilingFlag);
	
	CppLinkFlagList lflags;
	lflags.push_back(new CppLinkLibraryByTargetNameFlag("jtaghal", graph));
	lflags.push_back(new CppLinkLibraryByTargetNameFlag("jtagboards", graph));
	lflags.push_back(new CppLinkProfilingFlag);
	
	CppExecutableNode::CreateCppExecutableNode(
		graph,
		source_files,
		CppToolchain::CreateDefaultToolchainCached(),
		cflags,
		lflags,
		g_testname,
		true);
		
	//Run it
	for(auto part : g_partlist)
	{
		FPGAUnitTestNode::CreateFPGAUnitTestNode(	
			graph,
			"",
			g_testname + part.name,
			part.partition,
			true);
	}
}

SPLASHFILE_EXPORT void CreateEdges(BuildGraph* graph)
{
	string arch = CppToolchain::CreateDefaultToolchainCached()->GetArchitecture();

	for(auto part : g_partlist)
	{
		string testname = g_testname + part.name;
		
		FPGAUnitTestNode* node = dynamic_cast<FPGAUnitTestNode*>(graph->GetTest(testname));
		if(node == NULL)
			FatalError(testname + ": test doesn't exist!");

		node->SetTestBinary(graph->GetTargetForArch(g_testname, arch));
		node->SetBitstream(graph->GetTarget(string("NetworkedEthernetMACTestBitstream") + part.name));
	}
}
