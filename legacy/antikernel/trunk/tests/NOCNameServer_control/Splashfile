/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief SPLASH build script for NOCNameServer_control
 */

#include <splashcore/splashcore.h>

using namespace std;

string g_testname = "NOCNameServer_control";

SPLASHFILE_EXPORT void CreateNodes(BuildGraph* graph )
{
	string srcdir = GetDirOfFile(CanonicalizePath(__FILE__));
	string prjroot = CanonicalizePath(srcdir + string("/../.."));
	
	//Setup
	YosysCrowbarFPGAToolchain* toolchain = YosysCrowbarFPGAToolchain::CreateDefaultToolchainCached();
	
	//Find source files
	vector<string> source_files;
	FindFilesByExtension(srcdir, ".v", source_files);
	source_files.push_back(CanonicalizePath(prjroot + "/rtl/achd-soc/noc/common/NOCNameServer_control.v"));
	source_files.push_back(CanonicalizePath(prjroot + "/rtl/achd-soc/noc/rpcv2/RPCv2Transceiver_receive.v"));
	source_files.push_back(CanonicalizePath(prjroot + "/rtl/achd-soc/noc/rpcv2/RPCv2Transceiver_transmit.v"));
	
	//Compile
	FPGASynthesisFlagList flags;
	RTLILNetlistNode* netlist = RTLILNetlistNode::CreateRTLILNetlistNode(
		graph,
		source_files,
		toolchain,
		g_testname,
		"main",
		"xc6slx9-2tqg144",
		flags);
	
	//Test
	auto node = YosysProofUnitTestNode::CreateYosysProofUnitTestNode(
		graph,
		netlist,
		g_testname,
		"yosys");
	node->LogSignal("hang");
	node->LogSignal("count");
	node->LogSignal("cmd_busy");
	node->LogSignal("tx_busy");
	node->LogSignal("tx_busy_ff");
	
	node->LogSignal("rpc_fab_rx_en");
	node->LogSignal("rpc_fab_rx_type");
	//node->LogSignal("rpc_fab_rx_src_addr");
	node->LogSignal("rpc_fab_rx_callnum");
	node->LogSignal("rpc_fab_rx_d0");
	//node->LogSignal("rpc_fab_rx_d1");
	//node->LogSignal("rpc_fab_rx_d2");
	node->LogSignal("rpc_fab_rx_done");
	
	node->LogSignal("rpc_fab_tx_en");
	node->LogSignal("rpc_fab_tx_type");
	node->LogSignal("rpc_fab_tx_callnum");
	node->LogSignal("rpc_fab_tx_d0");
	node->LogSignal("rpc_fab_tx_d1");
	node->LogSignal("rpc_fab_tx_d2");
	node->LogSignal("tx_d0_expected");
	node->LogSignal("tx_d1_expected");
	node->LogSignal("tx_d2_expected");
	node->LogSignal("rpc_fab_tx_done");
	
	node->LogSignal("rd_en");
	node->LogSignal("wr_en");
	node->LogSignal("hmac_mem_wr");
	node->LogSignal("mutex_lock_en");
	node->LogSignal("mutex_unlock_en");
	node->LogSignal("hmac_start_en");
	node->LogSignal("hmac_data_en");
	node->LogSignal("hmac_finish_en");
	
	//node->LogSignal("tx_type_expected");
	//node->LogSignal("tx_callnum_expected");
}

SPLASHFILE_EXPORT void CreateEdges(BuildGraph* /* graph */)
{
}
