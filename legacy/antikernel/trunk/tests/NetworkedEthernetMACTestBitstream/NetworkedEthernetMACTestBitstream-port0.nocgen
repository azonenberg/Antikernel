////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//ANTIKERNEL v0.1                                                                                                     //
//                                                                                                                    //
//Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                         //
//All rights reserved.                                                                                                //
//                                                                                                                    //
//Redistribution and use in source and binary forms, with or without modification, are permitted provided that the    //
//following conditions are met:                                                                                       //
//                                                                                                                    //
//   * Redistributions of source code must retain the above copyright notice, this list of conditions, and the        //
//     following disclaimer.                                                                                          //
//                                                                                                                    //
//   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the      //
//     following disclaimer in the documentation and/or other materials provided with the distribution.               //
//                                                                                                                    //
//   * Neither the name of the author nor the names of any contributors may be used to endorse or promote products    //
//     derived from this software without specific prior written permission.                                          //
//                                                                                                                    //
//THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  //
//TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL//
//THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES       //
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR      //
//BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT//
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE      //
//POSSIBILITY OF SUCH DAMAGE.                                                                                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// @file
// @author Andrew D. Zonenberg
// @brief NocGen script for generating NetworkedEthernetMACTestBitstream

// Top-level module name
top NetworkedEthernetMACTestBitstream

// Clock generation
pll MainClockPLL
	inclk clkin
	outclk clk_noc		freq 100M duty 0.5 phase 0.0
	outclk clk_25mhz	freq  25M duty 0.5 phase 0.0
	outclk clk_125mhz	freq 125M duty 0.5 phase 0.0
endpll

// The RAM
node ram BlockRamAllocator
	rpc
	dma
endnode

// The MAC core
node eth0 NetworkedEthernetMAC

	parameter PHY_CHIPSET 		"KSZ9021"
	parameter PHY_INTERFACE		"RGMII"
	
	clock   	clk_25mhz		port clk_25mhz
	clock   	clk_125mhz		port clk_125mhz
	clock	 	eth0_rxc		port xmii_rxc
	
	input	1 	eth0_rx_ctl		port xmii_rx_ctl
	input	4 	eth0_rxd		port xmii_rxd
	
	output	1 	eth0_tx_ctl		port xmii_tx_ctl
	output	1 	eth0_txc		port xmii_txc
	output	4 	eth0_txd		port xmii_txd
	
	inout	1	eth0_mdio		port mgmt_mdio
	output	1	eth0_mdc		port mgmt_mdc
	
	output	1	eth0_reset_n	port reset_n
	output	1	eth0_clk_25mhz	port clkout

	//Tie off unused baseX ports
	constant	1'b0				port sfp_refclk
	constant	1'b0				port sfp_rx_p
	constant	1'b0				port sfp_rx_n
	nc								port sfp_tx_p
	nc								port sfp_tx_n

	rpc
	dma
endnode

// Generate cross-clock constraints (must be after eth0 since we need to pull the signals in first)
crossclock eth0_rxc		clk_noc
crossclock clk_125mhz	clk_noc

//Packet sniffer
//sniffer EthSniff
//	target eth0
//endsniffer

//la EthLA
	
//	signal	1	eth0_rpc_rx_en
//	signal	2	eth0_rpc_rx_ack
//	signal	32	eth0_rpc_rx_data
	
//	signal	1	eth0_rpc_tx_en
//	signal	2	eth0_rpc_tx_ack
//	signal	32	eth0_rpc_tx_data
	
//	signal	6	state				constants /nfs/home/azonenberg/Documents/local/programming/achd-soc/trunk/rtl/achd-soc/ethernet/NetworkedEthernetMAC_states.constants
	
//endla
