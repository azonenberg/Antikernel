////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//ANTIKERNEL v0.1                                                                                                     //
//                                                                                                                    //
//Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                         //
//All rights reserved.                                                                                                //
//                                                                                                                    //
//Redistribution and use in source and binary forms, with or without modification, are permitted provided that the    //
//following conditions are met:                                                                                       //
//                                                                                                                    //
//   * Redistributions of source code must retain the above copyright notice, this list of conditions, and the        //
//     following disclaimer.                                                                                          //
//                                                                                                                    //
//   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the      //
//     following disclaimer in the documentation and/or other materials provided with the distribution.               //
//                                                                                                                    //
//   * Neither the name of the author nor the names of any contributors may be used to endorse or promote products    //
//     derived from this software without specific prior written permission.                                          //
//                                                                                                                    //
//THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  //
//TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL//
//THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES       //
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR      //
//BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT//
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE      //
//POSSIBILITY OF SUCH DAMAGE.                                                                                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// @file
// @author Andrew D. Zonenberg
// @brief NocGen script for generating SFPTestBitstream

// Top-level module name
top SFPTestBitstream

// Clock generation
pll MainClockPLL
	diffclk clkin 
	outclk clk_noc	freq 125M	duty 0.5 phase 0.0
endpll

// I2C transceiver
node i2c NetworkedI2CTransceiver
	rpc
	
	inout	1	i2c_sda	port i2c_sda
	output	1	i2c_scl	port i2c_scl
endnode

//Pull in the reference clock for the SFP GTP
gtpclk	sfp_clk

//MAC address generator
node macgen DieSerialMacGenerator
	rpc
endnode

// The IP offload core
node ipv6 IPv6OffloadEngine

	parameter PHY_INTERFACE			"SFP"
	
	//Forward packets to the appropriate handler
	parameter ICMP_HOST			[[node_icmp_addr]]
	parameter UDP_HOST			[[node_bridge_addr]]

	//125 MHz internal clock used for resets etc
	clock		clk_noc				port clk_125mhz

	//125 MHz dedicated clock for SERDES stuff
	clock		sfp_clk				port sfp_refclk
	
	//Constrain internal clock to 62.5 MHz
	constrain	gmii_rxc			freq 62.5M
	debug	1	gmii_rxc			port gmii_rxc
	
	//High-speed serial transmit pair
	output	1	sfp_tx_p			port sfp_tx_p
	output	1	sfp_tx_n			port sfp_tx_n
	
	//High-speed serial receive pair
	input	1	sfp_rx_p			port sfp_rx_p
	input	1	sfp_rx_n			port sfp_rx_n
	
	//Tie off unused baseT ports
	constant	1'b0				port clk_25mhz
	constant	1'b0				port xmii_rxc
	constant	2'b0				port xmii_rx_ctl
	constant	8'b0				port xmii_rxd
	nc								port xmii_tx_ctl
	nc								port xmii_txc
	nc								port xmii_txd
	nc								port mgmt_mdio
	nc								port mgmt_mdc
	nc								port reset_n
	nc								port clkout

	rpc
	dma
endnode

//ICMP
node icmp ICMPv6OffloadEngine

	parameter IPV6_HOST				[[node_ipv6_addr]]

	rpc
	dma	
endnode

// The RAM
node ram BlockRamAllocator
	rpc
	dma
endnode

//DMA bridge for capturing to the PC for testing
node bridge DMABridge

	rpc
	dma
	
endnode

//Set clock mux to put 125 MHz from U2 on MGTREFCLK0
constant 0 sfp_clksel0
constant 0 sfp_clksel1

// Generate cross-clock constraints (must be after eth0 since we need to pull the signals in first)
//TODO: Figure out how to do cross-clock constraints without bringing the signal up to the top level!
crossclock gmii_rxc	clk_noc

