/***********************************************************************************************************************
*                                                                                                                      *
* ANTIKERNEL v0.1                                                                                                      *
*                                                                                                                      *
* Copyright (c) 2012-2016 Andrew D. Zonenberg                                                                          *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief SPLASH build script for indirect flash nodes
 */

#include <splashcore/splashcore.h>

using namespace std;

SPLASHFILE_EXPORT void CreateNodes(BuildGraph* graph )
{
	//Setup
	string srcdir = GetDirOfFile(CanonicalizePath(__FILE__));
	string prjroot = graph->GetSourceDir();
	XilinxFPGAToolchain* toolchain = XilinxFPGAToolchain::CreateDefaultToolchainCached();

	//Generic flags (same for all devices)
	FPGASynthesisFlagList xstflags;
	xstflags.push_back(new FPGASynthesisHierarchyFlag(FPGASynthesisHierarchyFlag::HIERARCHY_SOFT));
	xstflags.push_back(new FPGASynthesisOptimizationFlag(
		FPGASynthesisOptimizationFlag::OPT_NORMAL,
		FPGASynthesisOptimizationFlag::OPT_SPEED));
	XilinxFPGAMapFlagList mapflags;
	FPGAPlaceAndRouteFlagList parflags;
	FPGATimingAnalysisFlagList timeflags;
	FPGABitstreamGenerationFlagList bitgenflags;

	//List of board support pcackages we're targeting
	const char* bsps[]=
	{
		//TODO: spartan3a
		
		//TODO: xc6slx4 after we optimize better
		"/bsp/lx9mini.bsp",				//xc6slx9
		//TODO: xc6slx16
		"/bsp/switch.bsp",				//xc6slx25
		//"/bsp/atlys.bsp",				//xc6slx45
		//TODO: xc6slx75
		
		//TODO: xc7a100t
		"/bsp/generic-xc7a200t.bsp",	//xc7a200t
		
		"/bsp/tdr.bsp"					//xc7k70t
		//TODO: xc7k160t
	};
	
	//Find generic source files
	vector<string> source_files;
	FindFilesByExtension(prjroot + "/rtl/achd-soc/debug/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/flash/nor/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/math/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/noc/common/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/noc/dma/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/peripherals/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/noc/rpcv2/", ".v", source_files);
	FindFilesByExtension(prjroot + "/rtl/achd-soc/util/", ".v", source_files);

	for(auto dev : bsps)
	{
		vector<string> devsources = source_files;
		
		//Create the nocgen node
		Nocgenv2GeneratedSourceNode* top = Nocgenv2GeneratedSourceNode::CreateNocgenNode(
			graph,
			srcdir + "/IndirectFlash-quadspi.nocgen",
			prjroot + dev);
		devsources.push_back(top->GetOutputPath());
			
		//Create the bitstream
		FPGABitstreamNode::CreateFPGABitstreamNode(
			graph,
			devsources,
			string("IndirectFlash-") + top->GetDevice(),
			top->GetTopLevel(),
			top->GetDevice(),
			top->GetConstraintsPath(),
			xstflags,
			mapflags,
			parflags,
			timeflags,
			bitgenflags,
			toolchain,
			true);
	}
}

SPLASHFILE_EXPORT void CreateEdges(BuildGraph* /* graph */)
{
	
}
